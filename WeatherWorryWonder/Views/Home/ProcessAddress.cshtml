@using WeatherWorryWonder.Models
@using WeatherWorryWonder.Controllers
@{
    Sensor s = Sensor.GetSensors()[2];
    List<double> historicData = PollutantController.HistoricData(s);
}
@foreach (double d in historicData)
{
    <p>@d</p>
}




<div id="myDiv"></div>
<script>


    var trace1 = {
        x: [1,2,3,4,5,6,7],
        y: [@historicData[0], @historicData[1], @historicData[2], @historicData[3]],
        type: 'scatter',
    };

    var layout = {
        xaxis: {
            autotick: false,
            ticks: 'outside',
            tick0: 0,
            dtick: 1,
            ticklen: 8,
            tickwidth: 4,
            tickcolor: '#000'
        },
        yaxis: {
            autotick: false,
            ticks: 'outside',
            tick0: 0,
            dtick: .025,
            ticklen: 8,
            tickwidth: 4,
            tickcolor: '#000'
        }
    }
    var data = [trace1];

    Plotly.newPlot('myDiv', data, {}, { showSendToCloud: true });


</script>

    @*<div id="map"></div>
        <script>
            debugger;
            var map;
            let latitude = @latitude;
            let longitude = @longitude;
            var sensor = { lat: latitude, lng: longitude }
            function initMap() {
                map = new google.maps.Map(document.getElementById('map'), {
                    center: sensor,
                    zoom: 14
                });
                var marker = new google.maps.Marker({ position: sensor, label: "Closest Marker", map: map })
            }
        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=@APIKeys.GoogleMapsAPI&callback=initMap"
                async defer></script>*@
